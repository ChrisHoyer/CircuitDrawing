param ["Typ",en="Type"]={["Simpel",en="Simple"] "Schottky" "Zener" "LED"}

def dreieckLaenge = 200
def dreieckHoehe = 120
def zenerLaenge = dreieckHoehe/2

def LEDArrowStart_X = 150
def LEDArrowStart_Y = 150
def LEDArrowLaenge = 100
def LEDArrowPointer = LEDArrowLaenge/3
def LEDShift = 100

Drawing:
%Dreieck
fill_backcolor()
polyfill(0,-dreieckHoehe,0,dreieckHoehe,dreieckLaenge,0)
fill_forecolor()
poly(0, -dreieckHoehe, 0, dreieckHoehe, dreieckLaenge, 0)

%Wire
line(-200, 0, dreieckLaenge+200, 0)

%Kante
line(dreieckLaenge, -dreieckHoehe, dreieckLaenge, dreieckHoehe)

snapLeft(-200, 0)
snapRight(dreieckLaenge+200, 0)
select(-200, -dreieckHoehe, dreieckLaenge+400, 2*dreieckHoehe)
if get("Typ")="Schottky":
  line(dreieckLaenge, -dreieckHoehe, dreieckLaenge+zenerLaenge, -dreieckHoehe)
  line(dreieckLaenge, dreieckHoehe, dreieckLaenge-zenerLaenge, dreieckHoehe)
elseif get("Typ")="Zener"
  line(dreieckLaenge, dreieckHoehe, dreieckLaenge-zenerLaenge, dreieckHoehe)
elseif get("Typ")="LED"
  %Erster Pfeil
  line(LEDArrowStart_X, LEDArrowStart_Y, LEDArrowStart_X+LEDArrowLaenge, LEDArrowStart_Y+LEDArrowLaenge)
  line(LEDArrowStart_X+LEDArrowLaenge, LEDArrowStart_Y+LEDArrowLaenge,LEDArrowStart_X+LEDArrowLaenge, LEDArrowStart_Y+LEDArrowLaenge-LEDArrowPointer)
  line(LEDArrowStart_X+LEDArrowLaenge, LEDArrowStart_Y+LEDArrowLaenge,LEDArrowStart_X+LEDArrowLaenge-LEDArrowPointer, LEDArrowStart_Y+LEDArrowLaenge)
  %Zweiter Pfeil
  line(LEDArrowStart_X-LEDShift, LEDArrowStart_Y, LEDArrowStart_X+LEDArrowLaenge-LEDShift, LEDArrowStart_Y+LEDArrowLaenge)
  line(LEDArrowStart_X+LEDArrowLaenge-LEDShift, LEDArrowStart_Y+LEDArrowLaenge,LEDArrowStart_X+LEDArrowLaenge-LEDShift, LEDArrowStart_Y+LEDArrowLaenge-LEDArrowPointer)
  line(LEDArrowStart_X+LEDArrowLaenge-LEDShift, LEDArrowStart_Y+LEDArrowLaenge,LEDArrowStart_X+LEDArrowLaenge-LEDArrowPointer-LEDShift, LEDArrowStart_Y+LEDArrowLaenge)
end
Drawing End

def TPxmin=0
def TPxmax=dreieckLaenge
def TPymin=-dreieckHoehe
def TPymax=dreieckHoehe
input(../_basic_rect_Textpos.sym)

Info:
origin(-200, 0)
text(D)
name(Diode)
namespace(Basic)
Info End