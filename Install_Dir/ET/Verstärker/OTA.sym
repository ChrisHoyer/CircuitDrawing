param ["Ausgang",en="Output"]={"Single Ended" "Fully Differential" "Fully Differential flipped output"}
param ["Größe",en="Size"] = {["Groß",en="Large"] ["Klein",en="Small"] ["Benutzerdefiniert",en="Custom"]}
param_int ["Höhe 1",en="Height 1"] = 600 from (0, 100000]
param_int ["Höhe 2",en="Height 2"] = 350 from (0, 100000]
param_int ["Breite",en="Width"] = 750 from (0, 50, 100000]
param_int ["Pin-Höhe1",de="Pin-Höhe 1",en="Pin Height 1"] = 250 from (0, 50, 10000]
param_int ["Pin-Höhe2",de="Pin-Höhe 2",en="Pin Height 2"] = 250 from (0, 50, 10000]

var rY = get("Höhe 1")
var rY2 = get("Höhe 2")
var breite = get("Breite")

var rYPin = get("Pin-Höhe1")
var rYPinAusgang = get("Pin-Höhe2")
def pmGroesse=130
Drawing:
if get("Größe")="Groß" :
  invisible("Höhe 1")
  invisible("Höhe 2")
  invisible("Breite")
  invisible("Pin-Höhe1")
  invisible("Pin-Höhe2")
  var breite = 750
  var rY = 600
  var rY2 = 350
  var rYPin = 250
  var rYPinAusgang = 250
elseif get("Größe")="Klein"
  invisible("Höhe 1")
  invisible("Höhe 2")
  invisible("Breite")
  invisible("Pin-Höhe1")
  invisible("Pin-Höhe2")
  var breite = 500
  var rY = 400
  var rY2 = 233
  var rYPin = 150
  var rYPinAusgang = 150
end
fill_backcolor()
polyfill(0, -rY, 0, rY, breite, rY2, breite, -rY2)
fill_forecolor()
poly(0, -rY, 0, rY, breite, rY2, breite, -rY2)

%Minus
line(50, rYPin, 50+pmGroesse, rYPin)
%Plus
line(50, -rYPin, 50+pmGroesse, -rYPin)
line(50+pmGroesse/2, -rYPin+pmGroesse/2, 50+pmGroesse/2, -rYPin-pmGroesse/2)
snapOnlyLeft(0, -rYPin)
snapOnlyLeft(0, rYPin)
select(0, -rY, breite, 2*rY)

if get("Ausgang")="Fully Differential":
  %Minus
  line(breite-50, -rYPinAusgang, breite-50-pmGroesse, -rYPinAusgang)
  %Plus
  line(breite-50, rYPinAusgang, breite-50-pmGroesse, rYPinAusgang)
  line(breite-50-pmGroesse/2, rYPinAusgang+pmGroesse/2, breite-50-pmGroesse/2, rYPinAusgang-pmGroesse/2)
elseif get("Ausgang")="Fully Differential flipped output"
  %Minus
  line(breite-50, rYPinAusgang, breite-50-pmGroesse, rYPinAusgang)
  %Plus
  line(breite-50, -rYPinAusgang, breite-50-pmGroesse, -rYPinAusgang)
  line(breite-50-pmGroesse/2, -rYPinAusgang+pmGroesse/2, breite-50-pmGroesse/2, -rYPinAusgang-pmGroesse/2)
end
if get("Ausgang")="Single Ended":
  snapOnlyRight(breite, 0)
else
  snapOnlyRight(breite, rYPinAusgang)
  snapOnlyRight(breite, -rYPinAusgang)
end
Drawing End

Textpos:
pos(breite/2, 0)
vector(0, 0)
dist(-1, 0)
Textpos End

Textpos:
pos(breite, 0)
vector(1, -1)
Textpos End

Textpos:
pos(breite, 0)
vector(1, 1)
Textpos End

Textpos:
pos(breite/2, rY)
vector(0, 1)
Textpos End

Textpos:
pos(breite/2, -rY)
vector(0, -1)
Textpos End

Info:
origin(0, -rYPin)
text($G_T$)
nonumber()
name(OTA)
namespace(Verstärker)
Info End 

Compatibility:
name(OTA (Groß))
namespace(Verstärker)
setparam("Höhe 1", 600)
setparam("Höhe 2", 300)
setparam("Breite", 750)
setparam("Pin-Höhe1", 300)
setparam("Pin-Höhe2", 200)
setparam("Größe", Benutzerdefiniert)
Compatibility End

Compatibility:
name(OTA (Klein))
namespace(Verstärker)
setparam("Höhe 1", 400)
setparam("Höhe 2", 200)
setparam("Breite", 500)
setparam("Pin-Höhe1", 200)
setparam("Pin-Höhe2", 150)
setparam("Größe", Benutzerdefiniert)
Compatibility End